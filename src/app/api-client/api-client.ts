//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    account(): Observable<AccountDto[]> {
        let url_ = this.baseUrl + "/api/Account";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountDto[]>;
        }));
    }

    protected processAccount(response: HttpResponseBase): Observable<AccountDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AccountDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined): Observable<LoginResponseDto> {
        let url_ = this.baseUrl + "/api/Authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResponseDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    emailLogin(body: EmailLoginRequest | undefined): Observable<LoginResponseDto> {
        let url_ = this.baseUrl + "/api/Authentication/email-login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmailLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResponseDto>;
        }));
    }

    protected processEmailLogin(response: HttpResponseBase): Observable<LoginResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    generateLoginCode(body: GenerateLoginCodeRequest | undefined): Observable<GenerateLoginCodeResponseDto> {
        let url_ = this.baseUrl + "/api/Authentication/generate-login-code";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateLoginCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateLoginCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GenerateLoginCodeResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GenerateLoginCodeResponseDto>;
        }));
    }

    protected processGenerateLoginCode(response: HttpResponseBase): Observable<GenerateLoginCodeResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenerateLoginCodeResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    chatAll(): Observable<ChatDto[]> {
        let url_ = this.baseUrl + "/api/Chat";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChatAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChatAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatDto[]>;
        }));
    }

    protected processChatAll(response: HttpResponseBase): Observable<ChatDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChatDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    chat(body: CreateIndividualChatRequest | undefined): Observable<ChatDtoBase> {
        let url_ = this.baseUrl + "/api/Chat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChat(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatDtoBase>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatDtoBase>;
        }));
    }

    protected processChat(response: HttpResponseBase): Observable<ChatDtoBase> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatDtoBase.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param page (optional) 
     * @return Success
     */
    messageAll(chatId: string, page: number | undefined): Observable<MessageDto[]> {
        let url_ = this.baseUrl + "/api/Message/{chatId}?";
        if (chatId === undefined || chatId === null)
            throw new Error("The parameter 'chatId' must be defined.");
        url_ = url_.replace("{chatId}", encodeURIComponent("" + chatId));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMessageAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMessageAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MessageDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MessageDto[]>;
        }));
    }

    protected processMessageAll(response: HttpResponseBase): Observable<MessageDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MessageDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    message(body: CreateMessageRequest | undefined): Observable<MessageDto> {
        let url_ = this.baseUrl + "/api/Message";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMessage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MessageDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MessageDto>;
        }));
    }

    protected processMessage(response: HttpResponseBase): Observable<MessageDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param chatId (optional) 
     * @param messageId (optional) 
     * @return Success
     */
    markAsRead(chatId: string | undefined, messageId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Message/MarkAsRead?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        if (messageId === null)
            throw new Error("The parameter 'messageId' cannot be null.");
        else if (messageId !== undefined)
            url_ += "messageId=" + encodeURIComponent("" + messageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMarkAsRead(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMarkAsRead(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processMarkAsRead(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    profileGET(): Observable<ProfileDto> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProfileGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProfileGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProfileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProfileDto>;
        }));
    }

    protected processProfileGET(response: HttpResponseBase): Observable<ProfileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    profilePUT(body: UpdateProfileRequest | undefined): Observable<ProfileDto> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProfilePUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProfilePUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProfileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProfileDto>;
        }));
    }

    protected processProfilePUT(response: HttpResponseBase): Observable<ProfileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AccountDto implements IAccountDto {
    id?: string | undefined;
    accountTypeId?: number;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    imageId?: string | undefined;

    constructor(data?: IAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountTypeId = _data["accountTypeId"];
            this.photoUrl = _data["photoUrl"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.imageId = _data["imageId"];
        }
    }

    static fromJS(data: any): AccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountTypeId"] = this.accountTypeId;
        data["photoUrl"] = this.photoUrl;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["imageId"] = this.imageId;
        return data;
    }
}

export interface IAccountDto {
    id?: string | undefined;
    accountTypeId?: number;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    imageId?: string | undefined;
}

export class ChatDto implements IChatDto {
    id?: string | undefined;
    accountTypeId?: number;
    photoUrl?: string | undefined;
    chatName?: string | undefined;
    unreadCount?: number;
    lastMessageDate?: number;
    lastMessageId?: string | undefined;
    imageId?: string | undefined;
    isIndividual?: boolean;
    accountIds?: string[] | undefined;

    constructor(data?: IChatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountTypeId = _data["accountTypeId"];
            this.photoUrl = _data["photoUrl"];
            this.chatName = _data["chatName"];
            this.unreadCount = _data["unreadCount"];
            this.lastMessageDate = _data["lastMessageDate"];
            this.lastMessageId = _data["lastMessageId"];
            this.imageId = _data["imageId"];
            this.isIndividual = _data["isIndividual"];
            if (Array.isArray(_data["accountIds"])) {
                this.accountIds = [] as any;
                for (let item of _data["accountIds"])
                    this.accountIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ChatDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountTypeId"] = this.accountTypeId;
        data["photoUrl"] = this.photoUrl;
        data["chatName"] = this.chatName;
        data["unreadCount"] = this.unreadCount;
        data["lastMessageDate"] = this.lastMessageDate;
        data["lastMessageId"] = this.lastMessageId;
        data["imageId"] = this.imageId;
        data["isIndividual"] = this.isIndividual;
        if (Array.isArray(this.accountIds)) {
            data["accountIds"] = [];
            for (let item of this.accountIds)
                data["accountIds"].push(item);
        }
        return data;
    }
}

export interface IChatDto {
    id?: string | undefined;
    accountTypeId?: number;
    photoUrl?: string | undefined;
    chatName?: string | undefined;
    unreadCount?: number;
    lastMessageDate?: number;
    lastMessageId?: string | undefined;
    imageId?: string | undefined;
    isIndividual?: boolean;
    accountIds?: string[] | undefined;
}

export class ChatDtoBase implements IChatDtoBase {
    id?: string | undefined;

    constructor(data?: IChatDtoBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ChatDtoBase {
        data = typeof data === 'object' ? data : {};
        let result = new ChatDtoBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IChatDtoBase {
    id?: string | undefined;
}

export class CreateIndividualChatRequest implements ICreateIndividualChatRequest {
    accountId?: string | undefined;

    constructor(data?: ICreateIndividualChatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): CreateIndividualChatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIndividualChatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface ICreateIndividualChatRequest {
    accountId?: string | undefined;
}

export class CreateMessageRequest implements ICreateMessageRequest {
    text?: string | undefined;
    chatId?: string | undefined;
    image?: ImageRequestModel;

    constructor(data?: ICreateMessageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.chatId = _data["chatId"];
            this.image = _data["image"] ? ImageRequestModel.fromJS(_data["image"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateMessageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMessageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["chatId"] = this.chatId;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateMessageRequest {
    text?: string | undefined;
    chatId?: string | undefined;
    image?: ImageRequestModel;
}

export class EmailLoginRequest implements IEmailLoginRequest {
    email?: string | undefined;
    code?: number;
    antiSpamToken?: number;

    constructor(data?: IEmailLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.code = _data["code"];
            this.antiSpamToken = _data["antiSpamToken"];
        }
    }

    static fromJS(data: any): EmailLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EmailLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["code"] = this.code;
        data["antiSpamToken"] = this.antiSpamToken;
        return data;
    }
}

export interface IEmailLoginRequest {
    email?: string | undefined;
    code?: number;
    antiSpamToken?: number;
}

export class GenerateLoginCodeRequest implements IGenerateLoginCodeRequest {
    email?: string | undefined;
    antiSpamToken?: number;

    constructor(data?: IGenerateLoginCodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.antiSpamToken = _data["antiSpamToken"];
        }
    }

    static fromJS(data: any): GenerateLoginCodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateLoginCodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["antiSpamToken"] = this.antiSpamToken;
        return data;
    }
}

export interface IGenerateLoginCodeRequest {
    email?: string | undefined;
    antiSpamToken?: number;
}

export class GenerateLoginCodeResponseDto implements IGenerateLoginCodeResponseDto {
    codeValidInSeconds?: number;

    constructor(data?: IGenerateLoginCodeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.codeValidInSeconds = _data["codeValidInSeconds"];
        }
    }

    static fromJS(data: any): GenerateLoginCodeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateLoginCodeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeValidInSeconds"] = this.codeValidInSeconds;
        return data;
    }
}

export interface IGenerateLoginCodeResponseDto {
    codeValidInSeconds?: number;
}

export class ImagePreviewDto implements IImagePreviewDto {
    messageId?: string | undefined;
    id?: string | undefined;
    chatId?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;

    constructor(data?: IImagePreviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageId = _data["messageId"];
            this.id = _data["id"];
            this.chatId = _data["chatId"];
            this.width = _data["width"];
            this.height = _data["height"];
        }
    }

    static fromJS(data: any): ImagePreviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImagePreviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageId"] = this.messageId;
        data["id"] = this.id;
        data["chatId"] = this.chatId;
        data["width"] = this.width;
        data["height"] = this.height;
        return data;
    }
}

export interface IImagePreviewDto {
    messageId?: string | undefined;
    id?: string | undefined;
    chatId?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
}

export class ImageRequestModel implements IImageRequestModel {
    id?: string | undefined;
    width?: number;
    height?: number;
    imageFormat?: number;
    signature?: string | undefined;

    constructor(data?: IImageRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.imageFormat = _data["imageFormat"];
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): ImageRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImageRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["width"] = this.width;
        data["height"] = this.height;
        data["imageFormat"] = this.imageFormat;
        data["signature"] = this.signature;
        return data;
    }
}

export interface IImageRequestModel {
    id?: string | undefined;
    width?: number;
    height?: number;
    imageFormat?: number;
    signature?: string | undefined;
}

export class LinkPreviewDto implements ILinkPreviewDto {
    messageId?: string | undefined;
    chatId?: string | undefined;
    title?: string | undefined;
    imageUrl?: string | undefined;
    url?: string | undefined;

    constructor(data?: ILinkPreviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageId = _data["messageId"];
            this.chatId = _data["chatId"];
            this.title = _data["title"];
            this.imageUrl = _data["imageUrl"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): LinkPreviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkPreviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageId"] = this.messageId;
        data["chatId"] = this.chatId;
        data["title"] = this.title;
        data["imageUrl"] = this.imageUrl;
        data["url"] = this.url;
        return data;
    }
}

export interface ILinkPreviewDto {
    messageId?: string | undefined;
    chatId?: string | undefined;
    title?: string | undefined;
    imageUrl?: string | undefined;
    url?: string | undefined;
}

export class LoginRequest implements ILoginRequest {
    provider?: string | undefined;
    id?: string | undefined;
    authToken?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provider = _data["provider"];
            this.id = _data["id"];
            this.authToken = _data["authToken"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["id"] = this.id;
        data["authToken"] = this.authToken;
        return data;
    }
}

export interface ILoginRequest {
    provider?: string | undefined;
    id?: string | undefined;
    authToken?: string | undefined;
}

export class LoginResponseDto implements ILoginResponseDto {
    success?: boolean;
    token?: string | undefined;

    constructor(data?: ILoginResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): LoginResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["token"] = this.token;
        return data;
    }
}

export interface ILoginResponseDto {
    success?: boolean;
    token?: string | undefined;
}

export class MessageDto implements IMessageDto {
    id?: string | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    chatId?: string | undefined;
    isMine?: boolean | undefined;
    created?: number;
    linkPreview?: LinkPreviewDto;
    imageId?: string | undefined;
    imagePreview?: ImagePreviewDto;

    constructor(data?: IMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
            this.textHtml = _data["textHtml"];
            this.chatId = _data["chatId"];
            this.isMine = _data["isMine"];
            this.created = _data["created"];
            this.linkPreview = _data["linkPreview"] ? LinkPreviewDto.fromJS(_data["linkPreview"]) : <any>undefined;
            this.imageId = _data["imageId"];
            this.imagePreview = _data["imagePreview"] ? ImagePreviewDto.fromJS(_data["imagePreview"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        data["textHtml"] = this.textHtml;
        data["chatId"] = this.chatId;
        data["isMine"] = this.isMine;
        data["created"] = this.created;
        data["linkPreview"] = this.linkPreview ? this.linkPreview.toJSON() : <any>undefined;
        data["imageId"] = this.imageId;
        data["imagePreview"] = this.imagePreview ? this.imagePreview.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMessageDto {
    id?: string | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    chatId?: string | undefined;
    isMine?: boolean | undefined;
    created?: number;
    linkPreview?: LinkPreviewDto;
    imageId?: string | undefined;
    imagePreview?: ImagePreviewDto;
}

export class ProfileDto implements IProfileDto {
    id?: string | undefined;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    imageId?: string | undefined;

    constructor(data?: IProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.photoUrl = _data["photoUrl"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.imageId = _data["imageId"];
        }
    }

    static fromJS(data: any): ProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["photoUrl"] = this.photoUrl;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["imageId"] = this.imageId;
        return data;
    }
}

export interface IProfileDto {
    id?: string | undefined;
    photoUrl?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    imageId?: string | undefined;
}

export class UpdateProfileRequest implements IUpdateProfileRequest {
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: ImageRequestModel;

    constructor(data?: IUpdateProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.image = _data["image"] ? ImageRequestModel.fromJS(_data["image"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateProfileRequest {
    firstName?: string | undefined;
    lastName?: string | undefined;
    image?: ImageRequestModel;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}